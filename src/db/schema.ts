import { readFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import db from './config/database';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function generateSchema() {
  try {
    console.log('üîÑ G√©n√©ration du sch√©ma de la base de donn√©es...');

    // Read all migration files
    const migrationsDir = join(__dirname, 'migrations');
    const schemaFile = readFileSync(join(migrationsDir, '001_initial_schema.sql'), 'utf8');
    const subcategoriesFile = readFileSync(join(migrationsDir, '004_add_subcategories.sql'), 'utf8');

    // Combine all schema definitions
    const fullSchema = `
-- Schema de la base de donn√©es GDocs
-- G√©n√©r√© automatiquement le ${new Date().toISOString()}

${schemaFile}

${subcategoriesFile}
    `.trim();

    // Write schema to file
    const outputPath = join(process.cwd(), 'schema.sql');
    const fs = require('fs');
    fs.writeFileSync(outputPath, fullSchema);

    console.log('‚ú® Sch√©ma g√©n√©r√© avec succ√®s!');
    console.log(`üìÑ Le fichier schema.sql a √©t√© cr√©√© dans: ${outputPath}`);
    
    // Display usage instructions
    console.log('\nPour utiliser ce sch√©ma sur un nouveau serveur:');
    console.log('1. Copiez le fichier schema.sql sur le serveur');
    console.log('2. Connectez-vous √† votre base de donn√©es');
    console.log('3. Ex√©cutez la commande: source schema.sql');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du sch√©ma:', error);
    process.exit(1);
  }
}

// Generate schema
generateSchema();